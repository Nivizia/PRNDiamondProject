-- Create database if it doesn't exist
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'DIAMOND_PROJECT')
BEGIN
    CREATE DATABASE DIAMOND_PROJECT;
END
GO

-- Use the DIAMOND_PROJECT database
USE DIAMOND_PROJECT
GO

-- Drop existing tables if they exist
IF OBJECT_ID('ORDERITEM', 'U') IS NOT NULL
    DROP TABLE ORDERITEM;

IF OBJECT_ID('ORDERS', 'U') IS NOT NULL
    DROP TABLE ORDERS;

IF OBJECT_ID('PENDANTPAIRING', 'U') IS NOT NULL
    DROP TABLE PENDANTPAIRING;

IF OBJECT_ID('EARRINGPAIRING', 'U') IS NOT NULL
    DROP TABLE EARRINGPAIRING;

IF OBJECT_ID('RINGPAIRING', 'U') IS NOT NULL
    DROP TABLE RINGPAIRING;

IF OBJECT_ID('PENDANT', 'U') IS NOT NULL
    DROP TABLE PENDANT;

IF OBJECT_ID('EARRING', 'U') IS NOT NULL
    DROP TABLE EARRING;

IF OBJECT_ID('RING', 'U') IS NOT NULL
    DROP TABLE RING;

IF OBJECT_ID('DIAMOND', 'U') IS NOT NULL
    DROP TABLE DIAMOND;

IF OBJECT_ID('CUSTOMER', 'U') IS NOT NULL
    DROP TABLE CUSTOMER;
GO

-- Create the CUSTOMER table
CREATE TABLE CUSTOMER (
  CustomerID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  FirstName VARCHAR(50),
  LastName VARCHAR(50),
  Email VARCHAR(100),
  Username VARCHAR(50),
  Password VARCHAR(100),
  PhoneNumber VARCHAR(20),
  RegistrationDate DATETIME
);

-- Create the DIAMOND table
CREATE TABLE DIAMOND (
  D_ProductID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  Name VARCHAR(50),
  Price MONEY,
  ImageURL VARCHAR(255),
  D_Type VARCHAR(50),
  CaratWeight VARCHAR(20),
  Color VARCHAR(20),
  Clarity VARCHAR(20),
  Cut VARCHAR(20)
);

-- Create the RING table
CREATE TABLE RING (
  RingID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  Name VARCHAR(50),
  Price MONEY,
  StockQuantity INT,
  ImageURL VARCHAR(255),
  MetalType VARCHAR(50),
  RingSize VARCHAR(20)
);

-- Create the EARRING table
CREATE TABLE EARRING (
  EarringID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  Name VARCHAR(50),
  Price MONEY,
  StockQuantity INT,
  ImageURL VARCHAR(255),
  MetalType VARCHAR(50)
);

-- Create the PENDANT table
CREATE TABLE PENDANT (
  PendantID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  Name VARCHAR(50),
  Price MONEY,
  StockQuantity INT,
  ImageURL VARCHAR(255),
  MetalType VARCHAR(50)
);

-- Create the RINGPAIRING table
CREATE TABLE RINGPAIRING (
  R_ProductID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  RingID UNIQUEIDENTIFIER,
  DiamondID UNIQUEIDENTIFIER,
  FOREIGN KEY (RingID) REFERENCES RING(RingID),
  FOREIGN KEY (DiamondID) REFERENCES DIAMOND(D_ProductID)
);

-- Create the EARRINGPAIRING table
CREATE TABLE EARRINGPAIRING (
  E_ProductID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  EarringID UNIQUEIDENTIFIER,
  DiamondID UNIQUEIDENTIFIER,
  FOREIGN KEY (EarringID) REFERENCES EARRING(EarringID),
  FOREIGN KEY (DiamondID) REFERENCES DIAMOND(D_ProductID)
);

-- Create the PENDANTPAIRING table
CREATE TABLE PENDANTPAIRING (
  P_ProductID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  PendantID UNIQUEIDENTIFIER,
  DiamondID UNIQUEIDENTIFIER,
  FOREIGN KEY (PendantID) REFERENCES PENDANT(PendantID),
  FOREIGN KEY (DiamondID) REFERENCES DIAMOND(D_ProductID)
);

-- Create the ORDERS table
CREATE TABLE ORDERS (
  OrderID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  CustomerID UNIQUEIDENTIFIER,
  OrderDate DATETIME,
  TotalAmount MONEY,
  OrderStatus VARCHAR(50),
  FOREIGN KEY (CustomerID) REFERENCES CUSTOMER(CustomerID)
);

-- Create the ORDERITEM table
CREATE TABLE ORDERITEM (
  OrderItemID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
  OrderID UNIQUEIDENTIFIER,
  DiamondID UNIQUEIDENTIFIER NULL,
  RingPairingID UNIQUEIDENTIFIER NULL,
  EarringPairingID UNIQUEIDENTIFIER NULL,
  PendantPairingID UNIQUEIDENTIFIER NULL,
  Price MONEY,
  ProductType VARCHAR(500),
  FOREIGN KEY (OrderID) REFERENCES ORDERS(OrderID),
  CONSTRAINT FK_Orderitem_Diamond FOREIGN KEY (DiamondID) REFERENCES DIAMOND(D_ProductID),
  CONSTRAINT FK_Orderitem_Ringpairing FOREIGN KEY (RingPairingID) REFERENCES RINGPAIRING(R_ProductID),
  CONSTRAINT FK_Orderitem_Earringpairing FOREIGN KEY (EarringPairingID) REFERENCES EARRINGPAIRING(E_ProductID),
  CONSTRAINT FK_Orderitem_Pendantpairing FOREIGN KEY (PendantPairingID) REFERENCES PENDANTPAIRING(P_ProductID)
);